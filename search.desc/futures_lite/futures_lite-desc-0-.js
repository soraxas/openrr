searchState.loadedDescShard("futures_lite", 0, "Futures, streams, and async I/O combinators.\nCombinators for the <code>Future</code> trait.\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nTraits <code>Future</code>, <code>Stream</code>, [<code>AsyncRead</code>], [<code>AsyncWrite</code>], […\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nCombinators for the <code>Stream</code> trait.\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the [<code>block_on()</code>] function.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuses the stream so that it stops yielding items after the …\nGet a mutable reference to the underlying stream.\nGet a reference to the underlying stream.\nCalls a closure on each item and passes it on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this stream and get the underlying stream.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.")