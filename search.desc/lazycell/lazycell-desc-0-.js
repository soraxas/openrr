searchState.loadedDescShard("lazycell", 0, "This crate provides a <code>LazyCell</code> struct which acts as a …\nA lazily filled and thread-safe <code>Cell</code>, with frozen contents.\nA lazily filled <code>Cell</code>, with mutable contents.\nAn empty <code>AtomicLazyCell</code>.\nBorrows the contents of this lazy cell for the duration of …\nBorrows the contents of this lazy cell for the duration of …\nBorrows the contents of this lazy cell mutably for the …\nBorrows the contents of this <code>LazyCell</code> mutably for the …\nBorrows the contents of this lazy cell for the duration of …\nCreate a clone of this <code>LazyCell</code>\nCreate a clone of this <code>AtomicLazyCell</code>\nPut a value into this cell.\nPut a value into this cell.\nTest whether this cell has been previously filled.\nTest whether this cell has been previously filled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of the contents of the lazy cell.\nReturns a copy of the contents of the lazy cell.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>LazyCell</code>, returning the underlying value.\nConsumes this <code>LazyCell</code>, returning the underlying value.\nCreates a new, empty, <code>LazyCell</code>.\nCreates a new, empty, <code>AtomicLazyCell</code>.\nPut a value into this cell.\nPut a value into this cell.\nSame as <code>borrow_mut_with</code>, but allows the initializing …\nSame as <code>borrow_with</code>, but allows the initializing function …")