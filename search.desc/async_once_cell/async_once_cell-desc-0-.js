searchState.loadedDescShard("async_once_cell", 0, "A collection of lazy initialized values that are created …\nA value which is computed on demand by running a future.\nA helper struct for Lazy’s IntoFuture\nA helper struct for Lazy’s IntoFuture\nA cell which can be written to only once.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new lazy value with the given initializing …\nGets the reference to the underlying value.\nForces the evaluation of this lazy value and returns a …\nGets a mutable reference to the underlying value.\nGets the contents of the cell, initializing it with <code>init</code> …\nGets the contents of the cell, initializing it with <code>init</code> …\nForces the evaluation of this lazy value and returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the OnceCell, returning the wrapped value. …\nTakes ownership of the value if it was set.\nTakes ownership of the value or the initializing future.\nCreates a new empty cell.\nCreates a new lazy value with the given initializing …\nCreates a new cell with the given contents.\nTakes ownership of the value from a pinned object.\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nGets the value without blocking or starting the …\nGets the value without blocking or starting the …\nGets the value without blocking or starting the …\nCreates an already-initialized lazy value.")